from fastapi import APIRouter,Depends
from fastapi import status
from .schema import RegisterUserRequest, RegisterUserResponse,UpdateUserSchema,UpdateUserResponseSchema
from database.Superbase import get_db,Client
from typing import Annotated
from .service import RegisterUserService,UpdateUserService

router = APIRouter(tags=["Users"])


@router.get("/")
def root():
    return "Hello"


@router.post("/register",status_code=status.HTTP_201_CREATED,response_model=RegisterUserResponse)
async def register_user(userData:RegisterUserRequest,db:Annotated[Client,Depends(get_db)]):
    """
    Register a new user with the provided username, email, and password.
    
    Args:
        userData (RegisterUserRequest): The user data for registration.
        db (Client): The database client dependency.

    Returns:
        RegisterUserResponse: The response containing the registered user's details.
    """

    response = RegisterUserService(userData.model_dump(), db)
    # Here you would typically add logic to save the user to the database
    # For now, we will return the input data as a response
    return RegisterUserResponse(
        user_id=response[0]["user_id"],  # This should be generated by your database
        username=response[0]["username"],
        email=response[0]["email"]
    )


@router.put("/update/{user_id}",status_code=status.HTTP_200_OK,response_model=UpdateUserResponseSchema)
def UpdateProfile(user_id:str,userDetails:UpdateUserSchema,db:Annotated[Client,Depends(get_db)]):
    """Update username with helping of user_id"""
    response = UpdateUserService(user_id,userDetails.model_dump(),db)
    if response:
        return UpdateUserResponseSchema(message="User updated succuss")